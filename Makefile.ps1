# Makefile.ps1 - Automatizaci√≥n de tareas para LSP Esperanza
# Uso: .\Makefile.ps1 <comando>

param(
    [Parameter(Mandatory=$true)]
    [string]$Command
)

# Colores para output
$Red = "`e[31m"
$Green = "`e[32m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Reset = "`e[0m"

function Write-ColorOutput {
    param([string]$Color, [string]$Message)
    Write-Host "$Color$Message$Reset"
}

function Show-Help {
    Write-ColorOutput $Blue "üîß LSP ESPERANZA - COMANDOS DISPONIBLES"
    Write-Host "=" * 60
    Write-Host "üìä DATOS:"
    Write-Host "  collect-A        Recolectar datos para se√±a A"
    Write-Host "  collect-J        Recolectar datos para se√±a J (din√°mica)"
    Write-Host "  augment          Ejecutar augmentaci√≥n de datos"
    Write-Host "  demo-augment     Demo de augmentaci√≥n"
    Write-Host ""
    Write-Host "ü§ñ MODELO:"
    Write-Host "  train            Entrenar modelo bidireccional"
    Write-Host "  train-fast       Entrenamiento r√°pido (50 epochs)"
    Write-Host "  validate-model   Validar archivos del modelo"
    Write-Host ""
    Write-Host "üöÄ EJECUCI√ìN:"
    Write-Host "  run              Ejecutar traductor principal"
    Write-Host "  run-strict       Ejecutar con umbral alto (0.9)"
    Write-Host "  test             Ejecutar tests"
    Write-Host ""
    Write-Host "üîß UTILIDADES:"
    Write-Host "  setup            Configurar proyecto"
    Write-Host "  clean            Limpiar archivos temporales"
    Write-Host "  stats            Mostrar estad√≠sticas del proyecto"
    Write-Host "  deps             Instalar dependencias"
    Write-Host "  help             Mostrar esta ayuda"
    Write-Host ""
    Write-Host "üåê GIT & GITHUB:"
    Write-Host "  git-init         Inicializar repositorio Git"
    Write-Host "  git-status       Ver estado del repositorio"
    Write-Host "  git-commit       Crear commit con mensaje personalizado"
    Write-Host "  git-push         Subir cambios a GitHub"
    Write-Host "  deploy           Desplegar completo a GitHub"
    Write-Host "=" * 60
}

function Install-Dependencies {
    Write-ColorOutput $Yellow "üì¶ Instalando dependencias..."
    pip install -r requirements.txt
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput $Green "‚úÖ Dependencias instaladas correctamente"
    } else {
        Write-ColorOutput $Red "‚ùå Error instalando dependencias"
    }
}

function Setup-Project {
    Write-ColorOutput $Yellow "üîß Configurando proyecto LSP Esperanza..."
    
    # Crear directorios necesarios
    $directories = @("data/sequences", "models", "reports", "docs")
    foreach ($dir in $directories) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-ColorOutput $Green "‚úÖ Creado directorio: $dir"
        }
    }
    
    # Verificar Python
    python --version
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput $Red "‚ùå Python no encontrado"
        return
    }
    
    # Instalar dependencias
    Install-Dependencies
    
    # Mostrar informaci√≥n del sistema
    python src/utils/common.py
    
    Write-ColorOutput $Green "‚úÖ Proyecto configurado correctamente"
}

function Clean-Project {
    Write-ColorOutput $Yellow "üßπ Limpiando archivos temporales..."
    
    # Limpiar cache de Python
    Get-ChildItem -Path . -Recurse -Name "__pycache__" | Remove-Item -Recurse -Force
    Get-ChildItem -Path . -Recurse -Name "*.pyc" | Remove-Item -Force
    
    # Limpiar logs antiguos (m√°s de 7 d√≠as)
    Get-ChildItem -Path "reports" -Name "*.log" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Force
    
    Write-ColorOutput $Green "‚úÖ Limpieza completada"
}

function Show-Stats {
    Write-ColorOutput $Blue "üìä Mostrando estad√≠sticas del proyecto..."
    python src/utils/common.py
}

function Validate-Model {
    Write-ColorOutput $Yellow "üîç Validando archivos del modelo..."
    python -c "
from src.utils.common import validate_model_files
import json
result = validate_model_files()
print('‚úÖ Modelo v√°lido:' if result['valid'] else '‚ùå Modelo inv√°lido:')
print(json.dumps(result, indent=2, ensure_ascii=False))
"
}

function Run-Translator {
    param([string]$Threshold = "0.8")
    Write-ColorOutput $Yellow "üöÄ Ejecutando traductor LSP Esperanza..."
    python main.py --threshold $Threshold
}

function Train-Model {
    param([int]$Epochs = 100)
    Write-ColorOutput $Yellow "üéØ Entrenando modelo bidireccional ($Epochs epochs)..."
    python scripts/train_model.py --model-type bidirectional_dynamic --epochs $Epochs
}

function Collect-Data {
    param([string]$Sign, [int]$Samples = 100)
    Write-ColorOutput $Yellow "üìä Recolectando datos para se√±a '$Sign' ($Samples muestras)..."
    python scripts/collect_data.py --sign $Sign --samples $Samples
}

function Run-Tests {
    Write-ColorOutput $Yellow "üß™ Ejecutando tests..."
    python tests/test_translator.py
}

function Run-Augmentation {
    Write-ColorOutput $Yellow "üîÑ Ejecutando augmentaci√≥n de datos..."
    python scripts/run_augmentation.py
}

function Demo-Augmentation {
    Write-ColorOutput $Yellow "üé¨ Ejecutando demo de augmentaci√≥n..."
    python scripts/demo_augmentation.py
}

function Initialize-Git {
    Write-ColorOutput $Yellow "üîß Inicializando repositorio Git..."
    
    # Verificar si Git est√° instalado
    git --version
    if ($LASTEXITCODE -ne 0) {
        Write-ColorOutput $Red "‚ùå Git no est√° instalado"
        return
    }
    
    # Inicializar repositorio si no existe
    if (!(Test-Path ".git")) {
        git init
        Write-ColorOutput $Green "‚úÖ Repositorio Git inicializado"
    } else {
        Write-ColorOutput $Yellow "‚ö†Ô∏è  Repositorio Git ya existe"
    }
    
    # Configurar usuario si no est√° configurado
    $userName = git config user.name
    $userEmail = git config user.email
    
    if (!$userName) {
        Write-ColorOutput $Yellow "üìù Configurando usuario Git..."
        git config user.name "LSP Esperanza"
        git config user.email "lsp.esperanza@example.com"
    }
    
    Write-ColorOutput $Green "‚úÖ Git configurado correctamente"
}

function Add-RemoteOrigin {
    param([string]$RepoUrl = "https://github.com/Jaed69/Salvacion.git")
    
    Write-ColorOutput $Yellow "üîó Configurando repositorio remoto..."
    
    # Verificar si el remoto ya existe
    $existingRemote = git remote get-url origin 2>$null
    
    if ($existingRemote) {
        Write-ColorOutput $Yellow "‚ö†Ô∏è  Remoto 'origin' ya existe: $existingRemote"
        Write-ColorOutput $Yellow "üîÑ Actualizando URL del remoto..."
        git remote set-url origin $RepoUrl
    } else {
        git remote add origin $RepoUrl
        Write-ColorOutput $Green "‚úÖ Remoto 'origin' agregado: $RepoUrl"
    }
}

function Commit-All {
    param([string]$Message = "üöÄ LSP Esperanza - Proyecto reorganizado con modelo y datos")
    
    Write-ColorOutput $Yellow "üìù Creando commit con todos los archivos..."
    
    # Verificar estado del repositorio
    $status = git status --porcelain
    if (!$status) {
        Write-ColorOutput $Yellow "‚ö†Ô∏è  No hay cambios para commitear"
        return
    }
    
    # Agregar todos los archivos
    git add .
    
    # Mostrar archivos agregados
    Write-ColorOutput $Blue "üìÅ Archivos agregados:"
    git status --short
    
    # Crear commit
    git commit -m $Message
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput $Green "‚úÖ Commit creado exitosamente"
    } else {
        Write-ColorOutput $Red "‚ùå Error creando commit"
    }
}

function Push-To-GitHub {
    param([string]$Branch = "main")
    
    Write-ColorOutput $Yellow "üöÄ Subiendo a GitHub..."
    
    # Verificar si la rama existe localmente
    $currentBranch = git branch --show-current
    if ($currentBranch -ne $Branch) {
        Write-ColorOutput $Yellow "üîÑ Cambiando a rama $Branch..."
        
        # Verificar si la rama existe
        $branchExists = git branch --list $Branch
        if (!$branchExists) {
            git checkout -b $Branch
            Write-ColorOutput $Green "‚úÖ Rama $Branch creada"
        } else {
            git checkout $Branch
        }
    }
    
    # Push con configuraci√≥n de upstream
    git push -u origin $Branch
    
    if ($LASTEXITCODE -eq 0) {
        Write-ColorOutput $Green "‚úÖ Proyecto subido exitosamente a GitHub"
        Write-ColorOutput $Blue "üåê URL: https://github.com/Jaed69/Salvacion"
    } else {
        Write-ColorOutput $Red "‚ùå Error subiendo a GitHub"
        Write-ColorOutput $Yellow "üí° Verifica tus credenciales de GitHub"
    }
}

function Deploy-To-GitHub {
    Write-ColorOutput $Blue "üåü DESPLEGANDO LSP ESPERANZA A GITHUB"
    Write-Host "=" * 60
    
    # Paso 1: Inicializar Git
    Initialize-Git
    
    # Paso 2: Configurar remoto
    Add-RemoteOrigin
    
    # Paso 3: Commit todos los archivos
    Commit-All
    
    # Paso 4: Push a GitHub
    Push-To-GitHub
    
    Write-Host "=" * 60
    Write-ColorOutput $Green "üéâ ¬°PROYECTO DESPLEGADO EXITOSAMENTE!"
    Write-ColorOutput $Blue "üåê Repositorio: https://github.com/Jaed69/Salvacion"
    Write-ColorOutput $Yellow "üí° El proyecto incluye:"
    Write-Host "   üìä Datos de entrenamiento (143 secuencias)"
    Write-Host "   ü§ñ Modelo bidireccional entrenado (4.30 MB)"
    Write-Host "   üìù C√≥digo fuente completo y organizado"
    Write-Host "   üìö Documentaci√≥n detallada"
    Write-Host "   üîß Scripts de automatizaci√≥n"
}

function Show-Git-Status {
    Write-ColorOutput $Blue "üìä Estado del repositorio Git..."
    
    if (!(Test-Path ".git")) {
        Write-ColorOutput $Red "‚ùå No es un repositorio Git"
        Write-ColorOutput $Yellow "üí° Usa '.\Makefile.ps1 git-init' para inicializar"
        return
    }
    
    # Estado general
    git status
    
    # Informaci√≥n del remoto
    $remote = git remote get-url origin 2>$null
    if ($remote) {
        Write-ColorOutput $Green "üîó Remoto configurado: $remote"
    } else {
        Write-ColorOutput $Yellow "‚ö†Ô∏è  Sin remoto configurado"
    }
    
    # √öltimo commit
    $lastCommit = git log -1 --oneline 2>$null
    if ($lastCommit) {
        Write-ColorOutput $Blue "üìù √öltimo commit: $lastCommit"
    }
}
# Ejecutar comando
switch ($Command.ToLower()) {
    "help" { Show-Help }
    "setup" { Setup-Project }
    "deps" { Install-Dependencies }
    "clean" { Clean-Project }
    "stats" { Show-Stats }
    "validate-model" { Validate-Model }
    "run" { Run-Translator }
    "run-strict" { Run-Translator -Threshold "0.9" }
    "train" { Train-Model }
    "train-fast" { Train-Model -Epochs 50 }
    "collect-a" { Collect-Data -Sign "A" }
    "collect-j" { Collect-Data -Sign "J" }
    "test" { Run-Tests }
    "augment" { Run-Augmentation }
    "demo-augment" { Demo-Augmentation }
    "git-init" { Initialize-Git }
    "git-status" { Show-Git-Status }
    "git-commit" { 
        $msg = Read-Host "üí¨ Mensaje del commit"
        if ($msg) { Commit-All -Message $msg } else { Commit-All }
    }
    "git-push" { Push-To-GitHub }
    "deploy" { Deploy-To-GitHub }
    default {
        Write-ColorOutput $Red "‚ùå Comando desconocido: $Command"
        Write-ColorOutput $Yellow "üí° Usa '.\Makefile.ps1 help' para ver comandos disponibles"
    }
}
